worker_processes  1;

events {
  worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;
  gzip  on;

  upstream database {
    postgres_server  127.0.0.1 dbname=myfhir user=nicola password=nicola;
  }

  server {
    listen       5555;
    server_name  localhost;

    root /home/nicola/w/fhirweb/fnd/;


    location / {
      index  index.html index.htm;
      # rewrite (.*).html index.html;
    }

    location ~ /post/(.*)$ {
      client_max_body_size 1m;
      client_body_buffer_size 1m;

      set_form_input $data;
      postgres_escape $edata  $data;

      postgres_pass   database;
      postgres_query  "SELECT web_post(E'$data'::json)";
      postgres_output  value;
      add_header Content-Type text/plain;
    }

    location /pgg {
      postgres_pass   database;
      postgres_escape $epgreq  $pgreq;
      postgres_query  "SELECT lib.dispatch($epgreq)";
      postgres_output  value;
    }

    location /data {
        default_type text/html;
        set $pgreq '{}';
        content_by_lua '
           local cjson = require("cjson")
           local req = {}
           req["meth"] =  ngx.req.get_method()
           req["uri"] =  ngx.var.uri
           req["request_uri"] =  ngx.var.request_uri
           req["uri_args"] =  ngx.req.get_uri_args()
           req["request_body"] = ngx.var.request_body
           local pgreq = cjson.encode(req)

           local resp = ngx.location.capture("/pgg", {
               method = ngx.HTTP_GET, vars = { pgreq = pgreq }
           })

           if resp.status ~= ngx.HTTP_OK or not resp.body then
             error("failed to query pgsql")
           end

           ngx.say(resp.body)
        ';
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }
  }
}
